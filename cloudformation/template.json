{
    "AWSTemplateFormatVersion" : "2010-09-09",
    
    "Description" : "AWS CloudFormation for Installing Rancher through the RGS Marketplace Offering",
    
    "Parameters" : {
      "KeyName": {
        "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instance",
        "Type": "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
      },
      "VolumeSize": {
        "Description": "Main volume size for Rancher nodes",
        "Type": "Number",
        "MinValue": "25",
        "Default": "50"
      },
      "RancherHostname": {
        "Default": "rancher.example.com",
        "Description" : "Hostname for Rancher. Will require a DNS update or utilization of '/etc/hosts'.",
        "Type": "String",
        "MinLength": "1",
        "MaxLength": "253",
        "AllowedPattern" : "[A-Za-z\\.]*",
        "ConstraintDescription" : "must be a valid FQDN."
      },
      "ClusterJoinToken": {
          "Description": "Join token for cluster nodes. VERY IMPORTANT, ENSURE YOU SAVE AND STORE SECURELY.",
          "Type": "String",
          "MinLength": "5",
          "MaxLength": "200",
          "NoEcho": true
      },
      "RancherBoostrapPassword" : {
        "Description" : "Temporary initializing password for Rancher.",
        "Type" : "String",
        "Default" : "admin"
      },
      "InstanceType" : {
        "Description" : "Rancher EC2 instance type",
        "Type" : "String",
        "Default" : "m5.large",
        "AllowedValues" : [ "m5.large", "m5.xlarge", "m5.2xlarge" ],
        "ConstraintDescription" : "must be a valid EC2 instance type."
      },
      "SSHLocation" : {
        "Description" : " The IP address range that can be used to SSH to the EC2 instances",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x"
      },
      "VPCCidr" : {
        "Description" : "First 2 octects to use for the VPC (Default: 10.0)",
        "Type": "String",
        "MinLength": "3",
        "MaxLength": "7",
        "Default": "10.0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})",
        "ConstraintDescription": "must be a valid dot-separated string of the form x.x"
      }
    },
    "Mappings": {
      "AWSRegionArch2AMI" : {
        "us-gov-east-1": {
          "HVM64": "ami-033277a8576a02e7f"
        },
        "us-gov-west-1": {
          "HVM64": "ami-05aaa50d3cae6007d"
        }
      },
      "AWSRegion2AZ":{
        "us-gov-east-1": {
          "1":"us-gov-east-1a",
          "2":"us-gov-east-1b",
          "3":"us-gov-east-1c"
        },
        "us-gov-west-1": {
          "1":"us-gov-west-1a",
          "2":"us-gov-west-1b",
          "3":"us-gov-west-1c"
        }
      }
    },
    "Resources" : {
      "RancherSubnet1": {
          "Properties": {
              "CidrBlock": {
                "Fn::Join": [ "", [{ "Ref": "VPCCidr" }, ".10.0/24"]]
              },
              "MapPublicIpOnLaunch": "true",
              "VpcId": {
                  "Ref": "RancherVPC"
              },
              "AvailabilityZone" : { "Fn::FindInMap" : [ "AWSRegion2AZ", { "Ref" : "AWS::Region" }, "1" ] },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                          "Fn::Join": [" ", [{ "Ref": "AWS::StackName" }, "Subnet 1"]]
                      }
                  }
              ]
          },
          "Type": "AWS::EC2::Subnet"
      },
      "RancherSubnet2": {
        "Properties": {
            "CidrBlock": {
              "Fn::Join": [ "", [{ "Ref": "VPCCidr" }, ".11.0/24"]]
            },
            "MapPublicIpOnLaunch": "true",
            "VpcId": {
                "Ref": "RancherVPC"
            },
            "AvailabilityZone" : { "Fn::FindInMap" : [ "AWSRegion2AZ", { "Ref" : "AWS::Region" }, "2" ] },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": {
                      "Fn::Join": [" ", [{ "Ref": "AWS::StackName" }, "Subnet 2"]]
                    }
                }
            ]
        },
        "Type": "AWS::EC2::Subnet"
    },
    "RancherSubnet3": {
      "Properties": {
          "CidrBlock": {
            "Fn::Join": [ "", [{ "Ref": "VPCCidr" }, ".12.0/24"]]
          },
          "MapPublicIpOnLaunch": "true",
          "VpcId": {
              "Ref": "RancherVPC"
          },
          "AvailabilityZone" : { "Fn::FindInMap" : [ "AWSRegion2AZ", { "Ref" : "AWS::Region" }, "3" ] },
          "Tags": [
              {
                  "Key": "Name",
                  "Value": {
                    "Fn::Join": [" ", [{ "Ref": "AWS::StackName" }, "Subnet 3"]]
                  }
              }
          ]
      },
      "Type": "AWS::EC2::Subnet"
  },
      "RancherVPC": {
          "Properties": {
              "CidrBlock": {
                "Fn::Join": [ "", [{ "Ref": "VPCCidr" }, ".0.0/16"]]
              },
              "EnableDnsSupport": "true",
              "EnableDnsHostnames": "true",
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                        "Fn::Join": [" ", [{ "Ref": "AWS::StackName" }, "VPC"]]
                      }
                  }
              ]
          },
          "Type": "AWS::EC2::VPC"
      },
      "RancherInternetGateway": {
          "Type": "AWS::EC2::InternetGateway",
          "Properties": {
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                        "Fn::Join": [" ", [{ "Ref": "AWS::StackName" }, "IGW"]]
                      }
                  }
              ]
          }
      },
      "RancherGatewayAttachment": {
          "Type": "AWS::EC2::VPCGatewayAttachment",
          "Properties": {
              "VpcId": {
                  "Ref": "RancherVPC"
              },
              "InternetGatewayId": {
                  "Ref": "RancherInternetGateway"
              }
          }
      },
      "RancherRouteTable": {
          "Properties": {
              "VpcId": {
                  "Ref": "RancherVPC"
              },
              "Tags": [
                  {
                      "Key": "Name",
                      "Value": {
                        "Fn::Join": [" ", [{ "Ref": "AWS::StackName" }, "RouteTable"]]
                      }
                  }
              ]
          },
          "Type": "AWS::EC2::RouteTable"
      },
      "RancherRouteToGateway": {
          "Type": "AWS::EC2::Route",
          "DependsOn": "RancherGatewayAttachment",
          "Properties": {
              "DestinationCidrBlock": "0.0.0.0/0",
              "RouteTableId": {
                  "Ref": "RancherRouteTable"
              },
              "GatewayId": {
                  "Ref": "RancherInternetGateway"
              }
          }
      },
      "RancherRouteTableAssociation1": {
          "Type": "AWS::EC2::SubnetRouteTableAssociation",
          "Properties": {
              "RouteTableId": {
                  "Ref": "RancherRouteTable"
              },
              "SubnetId": {
                  "Ref": "RancherSubnet1"
              }
          }
      },
      "RancherRouteTableAssociation2": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "RouteTableId": {
                "Ref": "RancherRouteTable"
            },
            "SubnetId": {
                "Ref": "RancherSubnet2"
            }
        }
      },
      "RancherRouteTableAssociation3": {
        "Type": "AWS::EC2::SubnetRouteTableAssociation",
        "Properties": {
            "RouteTableId": {
                "Ref": "RancherRouteTable"
            },
            "SubnetId": {
                "Ref": "RancherSubnet3"
            }
        }
      },
      "RancherLaunchTemplate":{
        "Type":"AWS::EC2::LaunchTemplate",
        "Properties":{
          "LaunchTemplateName":"RancherLaunchTemplate",
          "LaunchTemplateData":{
            "IamInstanceProfile":{
            "Arn":{"Fn::GetAtt": ["RancherInstanceProfile", "Arn"]}
            },
            "DisableApiTermination":"true",
            "ImageId": { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" }, "HVM64" ] },
            "InstanceType"   : { "Ref" : "InstanceType" },
            "SecurityGroupIds" : [ 
              { "Fn::GetAtt" : ["RancherCPSecurityGroup", "GroupId"] },
              { "Fn::GetAtt" : ["RancherIngressSecurityGroup", "GroupId"] }
            ],
            "KeyName": { "Ref" : "KeyName" },
            "BlockDeviceMappings":[{
                "Ebs":{
                  "VolumeSize": { "Ref": "VolumeSize"},
                  "VolumeType": "gp2",
                  "DeleteOnTermination": true,
                  "Encrypted": true
                },
                "DeviceName":"/dev/sda1"
              }],
            "UserData": { "Fn::Base64" : { "Fn::Join" : ["", [
              "#!/bin/bash -xe\n",
              "echo 'Initializing RKE2..'\n",
              { "Fn::Join": [" ", ["init-rke2.sh", { "Ref": "ClusterJoinToken" }, { "Fn::GetAtt" : [ "ControlPlaneELB", "DNSName" ] }, { "Ref" : "AWS::Region" }]]}, "\n",
              "echo 'Initializing Rancher..'\n",
              { "Fn::Join": [" ", ["init-rancher.sh", { "Ref": "RancherHostname"}, { "Ref": "RancherBoostrapPassword"}]]}, "\n"
            ]]}}
          }
        }
      },
      "RancherAutoScalingGroup": {
        "Type": "AWS::AutoScaling::AutoScalingGroup",
        "Properties": {
            "LaunchTemplate": {
                "LaunchTemplateId": { "Ref": "RancherLaunchTemplate" },
                "Version": { "Fn::GetAtt": [ "RancherLaunchTemplate", "LatestVersionNumber" ] }
            },
            "LoadBalancerNames" : [ 
              { "Ref" : "ControlPlaneELB" },
              { "Ref" : "RancherELB" }
            ],
            "MaxSize": "3",
            "MinSize": "3",
            "DesiredCapacity": "3",
            "VPCZoneIdentifier": [
              { "Ref" : "RancherSubnet1" },
              { "Ref" : "RancherSubnet2" },
              { "Ref" : "RancherSubnet3" }
            ],
            "Tags": [
              {
                  "Key": "Name",
                  "Value": {
                    "Fn::Join": [" ", [{ "Ref": "AWS::StackName" }, "ASG"]]
                  },
                  "PropagateAtLaunch": true
              }
          ]
        }
      },
      "RancherInstanceRole": {
        "Type": "AWS::IAM::Role",
        "Properties": {
            "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Effect": "Allow",
                        "Principal": {
                            "Service": [
                                "ec2.amazonaws.com"
                            ]
                        },
                        "Action": [
                            "sts:AssumeRole"
                        ]
                    }
                ]
            },
            "Path": "/",
            "Policies": [
                {
                    "PolicyName": "rancher-instance-policy",
                    "PolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Action": [
                                  "autoscaling:DescribeAutoScalingGroups",
                                  "autoscaling:DescribeLaunchConfigurations",
                                  "autoscaling:DescribeTags",
                                  "autoscaling:DescribeAutoScalingInstances",
                                  "ec2:DescribeInstances",
                                  "ec2:DescribeRegions",
                                  "ec2:DescribeRouteTables",
                                  "ec2:DescribeSecurityGroups",
                                  "ec2:DescribeSubnets",
                                  "ec2:DescribeVolumes",
                                  "ec2:CreateSecurityGroup",
                                  "ec2:CreateTags",
                                  "ec2:CreateVolume",
                                  "ec2:ModifyInstanceAttribute",
                                  "ec2:ModifyVolume",
                                  "ec2:AttachVolume",
                                  "ec2:AuthorizeSecurityGroupIngress",
                                  "ec2:CreateRoute",
                                  "ec2:DeleteRoute",
                                  "ec2:DeleteSecurityGroup",
                                  "ec2:DeleteVolume",
                                  "ec2:DetachVolume",
                                  "ec2:RevokeSecurityGroupIngress",
                                  "ec2:DescribeVpcs",
                                  "elasticloadbalancing:AddTags",
                                  "elasticloadbalancing:AttachLoadBalancerToSubnets",
                                  "elasticloadbalancing:ApplySecurityGroupsToLoadBalancer",
                                  "elasticloadbalancing:CreateLoadBalancer",
                                  "elasticloadbalancing:CreateLoadBalancerPolicy",
                                  "elasticloadbalancing:CreateLoadBalancerListeners",
                                  "elasticloadbalancing:ConfigureHealthCheck",
                                  "elasticloadbalancing:DeleteLoadBalancer",
                                  "elasticloadbalancing:DeleteLoadBalancerListeners",
                                  "elasticloadbalancing:DescribeLoadBalancers",
                                  "elasticloadbalancing:DescribeLoadBalancerAttributes",
                                  "elasticloadbalancing:DetachLoadBalancerFromSubnets",
                                  "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
                                  "elasticloadbalancing:ModifyLoadBalancerAttributes",
                                  "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
                                  "elasticloadbalancing:SetLoadBalancerPoliciesForBackendServer",
                                  "elasticloadbalancing:AddTags",
                                  "elasticloadbalancing:CreateListener",
                                  "elasticloadbalancing:CreateTargetGroup",
                                  "elasticloadbalancing:DeleteListener",
                                  "elasticloadbalancing:DeleteTargetGroup",
                                  "elasticloadbalancing:DescribeListeners",
                                  "elasticloadbalancing:DescribeLoadBalancerPolicies",
                                  "elasticloadbalancing:DescribeTargetGroups",
                                  "elasticloadbalancing:DescribeTargetHealth",
                                  "elasticloadbalancing:ModifyListener",
                                  "elasticloadbalancing:ModifyTargetGroup",
                                  "elasticloadbalancing:RegisterTargets",
                                  "elasticloadbalancing:DeregisterTargets",
                                  "elasticloadbalancing:SetLoadBalancerPoliciesOfListener",
                                  "iam:CreateServiceLinkedRole",
                                  "kms:DescribeKey"
                                ],
                                "Resource": "*"
                            }
                        ]
                    }
                }
            ]
        }
    },
    "RancherInstanceProfile": {
        "Type": "AWS::IAM::InstanceProfile",
        "Properties": {
            "Path": "/",
            "Roles": [
                {
                    "Ref": "RancherInstanceRole"
                }
            ]
        }
    },
    "RancherCPSecurityGroup" : {
      "Type" : "AWS::EC2::SecurityGroup",
      "Properties" : {
        "VpcId": { "Ref": "RancherVPC" },
        "GroupDescription" : "Enable HTTP/HTTPS access via port 80/443",
        "SecurityGroupIngress" : [
          {"IpProtocol" : "tcp", "FromPort" : "9345", "ToPort" : "9345", "SourceSecurityGroupId" : {"Fn::GetAtt": ["ControlPlaneELBSG", "GroupId"]}},
          {"IpProtocol" : "tcp", "FromPort" : "6443", "ToPort" : "6443", "CidrIp" : "0.0.0.0/0"},
          {"IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"}}
        ]
      }      
    },
    "RancherIngressSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "VpcId": { "Ref": "RancherVPC" },
          "GroupDescription" : "Enable HTTP/HTTPS access via port 80/443",
          "SecurityGroupIngress" : [
            {"IpProtocol" : "tcp", "FromPort" : "30080", "ToPort" : "30080", "SourceSecurityGroupId" : {"Fn::GetAtt": ["RancherELBSG", "GroupId"]}},
            {"IpProtocol" : "tcp", "FromPort" : "30443", "ToPort" : "30443", "SourceSecurityGroupId" : {"Fn::GetAtt": ["RancherELBSG", "GroupId"]}},
            {"IpProtocol" : "-1", "FromPort" : "0", "ToPort" : "65535", "SourceSecurityGroupId" : {"Fn::GetAtt": ["RancherCPSecurityGroup", "GroupId"]}}
          ]
        }      
      },
      "ControlPlaneELBSG" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "VpcId": { "Ref": "RancherVPC" },
          "GroupDescription" : "Enable controlplane connectivity",
          "SecurityGroupIngress" : [
            {"IpProtocol" : "tcp", "FromPort" : "6443", "ToPort" : "6443", "CidrIp" : "0.0.0.0/0"},
            {"IpProtocol" : "tcp", "FromPort" : "9345", "ToPort" : "9345", "CidrIp" : "0.0.0.0/0"}
          ]
        }      
      },
      "RancherELBSG" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "VpcId": { "Ref": "RancherVPC" },
          "GroupDescription" : "Enable controlplane connectivity",
          "SecurityGroupIngress" : [
            {"IpProtocol" : "tcp", "FromPort" : "80", "ToPort" : "80", "CidrIp" : "0.0.0.0/0"},
            {"IpProtocol" : "tcp", "FromPort" : "443", "ToPort" : "443", "CidrIp" : "0.0.0.0/0"}
          ]
        }      
      },
      "ControlPlaneELB" : {
        "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties" : {
          "Subnets" : [
            { "Ref" : "RancherSubnet1" },
            { "Ref" : "RancherSubnet2" },
            { "Ref" : "RancherSubnet3" }
          ],
          "SecurityGroups": [
            {"Ref": "ControlPlaneELBSG"}
          ],
          "CrossZone": "true",
          "Listeners" : [ 
            {
              "LoadBalancerPort" : "6443",
              "InstancePort" : "6443",
              "Protocol" : "TCP"
            },
            {
              "LoadBalancerPort" : "9345",
              "InstancePort" : "9345",
              "Protocol" : "TCP"
            }
          ],
          "HealthCheck" : {
            "Target" : "TCP:6443",
            "HealthyThreshold" : "3",
            "UnhealthyThreshold" : "5",
            "Interval" : "30",
            "Timeout" : "5"
          }
        }
      },
      "RancherELB" : {
        "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties" : {
          "Subnets" : [
            { "Ref" : "RancherSubnet1" },
            { "Ref" : "RancherSubnet2" },
            { "Ref" : "RancherSubnet3" }
          ],
          "SecurityGroups": [
            {"Ref": "RancherELBSG"}
          ],
          "CrossZone" : "true",
          "Listeners" : [ 
            {
              "LoadBalancerPort" : "80",
              "InstancePort" : "30080",
              "Protocol" : "TCP"
            },
            {
              "LoadBalancerPort" : "443",
              "InstancePort" : "30443",
              "Protocol" : "TCP"
            }
          ],
          "HealthCheck" : {
            "Target" : "TCP:30080",
            "HealthyThreshold" : "3",
            "UnhealthyThreshold" : "5",
            "Interval" : "30",
            "Timeout" : "5"
          }
        }
      }
    },
    "Outputs" : {
      "RancherURL" : {
        "Description" : "URL for Rancher",
        "Value" : { "Fn::Join" : ["", ["https://", { "Ref": "RancherHostname"}]] }
      },
      "RancherELBHostname": {
        "Description": "ELB Hostname for Rancher. Requires a CNAME DNS added to the 'RancherURL' output.",
        "Value": { "Fn::GetAtt" : [ "RancherELB", "DNSName" ] }
      }
    }
  }
